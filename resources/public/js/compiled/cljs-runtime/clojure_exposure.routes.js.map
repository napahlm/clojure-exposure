{"version":3,"sources":["clojure_exposure/routes.cljs"],"mappings":";AAOA,GAAA,QAAAA,6CAAAC,oDAAAC;AAAA;AAAA,AAAA,iCAAA,iBAAAC,6BAAA,AAAAC,6CAAA,5HAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,0BAAA,6BAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC,xLAAiBO;;;AACjB,AAAAD,2EAAA,4DAAA;AAAA,AAAA,0FAAA,mDAAA;;AAEA,AAAKE,iCACH,6CAAA,mFAAA,IAAA,2CAAA,OAAA,oDAAA,QAAA,uDAAA,OAAA,qDAAA,OAAA,5WAACX;AAMH,gCAAA,hCAAMY,wEACHC;AADH,AAEE,6BAAA,AAAAC,tBAACC,sCAAkBJ,gCAAOE;;AAE5B,AAAA,kCAAA,0CAAAG,5EAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,qEAAAF;;;AAAA,AAAA,CAAA,uEAAA,vEAAME,kFACDI;AADL,AAEE,OAACC,8CAAMC,mBAAc,6CAAA,mFAAA,AAAAd,hIAACe,gJAAOlB,wCAAQe;;;AAFvC,CAAA,0DAAA,1DAAMJ;;AAAN;AAAA,CAAA,oDAAA,WAAAC,/DAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA,AAIA,mCAAA,nCAAMO,8EACHC;AADH,AAEE,IAAMC,QAAM,AAACC,gDAAQ,iHAAA,hHAAK,AAACC,eAAK,AAAA,yFAAUH;AAA1C,AACE,8BAAA,mFAAA,1GAACI,mOAA6CH;;AAElD,GAAA,QAAApC,6CAAAC,oDAAAuC;AAAA;AAAA,AAAA,AAASC,kCACP,AAACC,iBAAYR,iCAASlB;;AAExB,yCAAA,zCAAM2B,0FACHC;AADH,AAEE,OAAkBH,iFAAQ,AAACI,uHAAQD;;AAErC,sCAAA,tCAAME;AAAN,AAEE,OAAcL;;AAEhB,qBAAA,rBAACM,iFAEA,WAAKH;AAAL,AACE,OAACD,uCAAUC","names":["js/clojure-exposure","js/clojure-exposure.routes","js/clojure-exposure.routes.panels","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__14977","cljs.core/MultiFn","cljs.core.symbol","clojure-exposure.routes/panels","cljs.core/identity","clojure-exposure.routes/routes","clojure-exposure.routes/parse","url","cljs.core/deref","bidi.bidi/match-route","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","clojure-exposure.routes/url-for","seq14978","self__5755__auto__","cljs.core/seq","args","cljs.core.apply","bidi.bidi/path-for","cljs.core.into","clojure-exposure.routes/dispatch","route","panel","cljs.core.keyword","cljs.core/name","re-frame.core/dispatch","js/clojure-exposure.routes.history","clojure-exposure.routes/history","pushy.core/pushy","clojure-exposure.routes/navigate!","handler","clojure_exposure.routes.url_for","clojure-exposure.routes/start!","re-frame.core/reg-fx"],"sourcesContent":["(ns clojure-exposure.routes\r\n  (:require\r\n   [bidi.bidi :as bidi]\r\n   [pushy.core :as pushy]\r\n   [re-frame.core :as re-frame]\r\n   [clojure-exposure.events :as events]))\r\n\r\n(defmulti panels identity)\r\n(defmethod panels :default [] [:div \"No panel found for this route.\"])\r\n\r\n(def routes\r\n  (atom\r\n   [\"/\" {\"home\"  :home\r\n         \"about\" :about\r\n         \"data\"  :data\r\n         \"test\"  :test}]))\r\n\r\n(defn parse\r\n  [url]\r\n  (bidi/match-route @routes url))\r\n\r\n(defn url-for\r\n  [& args]\r\n  (apply bidi/path-for (into [@routes] args)))\r\n\r\n(defn dispatch\r\n  [route]\r\n  (let [panel (keyword (str (name (:handler route)) \"-panel\"))]\r\n    (re-frame/dispatch [::events/set-active-panel panel])))\r\n\r\n(defonce history\r\n  (pushy/pushy dispatch parse))\r\n\r\n(defn navigate!\r\n  [handler]\r\n  (pushy/set-token! history (url-for handler)))\r\n\r\n(defn start!\r\n  []\r\n  (pushy/start! history))\r\n\r\n(re-frame/reg-fx\r\n :navigate\r\n (fn [handler]\r\n   (navigate! handler)))"]}