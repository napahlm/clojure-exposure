{"version":3,"sources":["clojure_exposure/views.cljs"],"mappings":"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","names":["clojure-exposure.views/click-count","reagent.core.atom","cljs.core/deref","clojure-exposure.views/counting-component","cljs.core.swap_BANG_","cljs.core/inc","clojure-exposure.views/timer-component","seconds-elapsed","js/setTimeout","p1__18267#","clojure-exposure.views/atom-input","value","cljs.core/reset!","clojure-exposure.views/shared-state","val","clojure-exposure.views/radio-list","selected-radio","re_frame.core.subscribe","iter__5523__auto__","s__18269","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__18271","cljs.core/chunk-buffer","i__18270","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__18268","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","option","cljs.core._EQ_","re-frame.core/dispatch","clojure-exposure.views/nav-link","panel","label","e","clojure-exposure.views/navbar","clojure-exposure.views/home-panel","name","clojure-exposure.routes/panels","clojure-exposure.views/about-panel","clojure-exposure.views/data-panel","clojure-exposure.views/test-panel","clojure-exposure.views/main-panel","active-panel","clojure-exposure.views/main-view","cljs.core/chunk-first"],"sourcesContent":["(ns clojure-exposure.views\r\n  (:require\r\n   [re-frame.core :as re-frame]\r\n   [clojure-exposure.events :as events]\r\n   [clojure-exposure.routes :as routes]\r\n   [clojure-exposure.subs :as subs]\r\n   [reagent.core :as r] ; for clicker\r\n   ))\r\n\r\n; -------------------- Added components ---------------------------\r\n\r\n\r\n\r\n; other\r\n\r\n(def click-count (r/atom 0))\r\n\r\n(defn counting-component []\r\n  [:div\r\n   \"Total of \" [:code \"click-count\"] \": \" @click-count \" \"\r\n   [:input {:type \"button\" :value \"Click me!\"\r\n            :on-click #(swap! click-count inc)}]])\r\n\r\n(defn timer-component []\r\n  (let [seconds-elapsed (r/atom 0)]\r\n    (fn []\r\n      (js/setTimeout #(swap! seconds-elapsed inc) 1000)\r\n      [:div\r\n       \"Seconds elapsed: \" @seconds-elapsed])))\r\n\r\n(defn atom-input [value]\r\n  [:input {:type \"text\"\r\n           :value @value\r\n           :on-change #(reset! value (-> % .-target .-value))}])\r\n\r\n(defn shared-state []\r\n  (let [val (r/atom \"test\")]\r\n    (fn []\r\n      [:div\r\n       [:p \"The value is now: \" @val]\r\n       [:p \"Change it here: \" [atom-input val]]])))\r\n\r\n; radio list\r\n\r\n(defn radio-list []\r\n  (let [selected-radio (re-frame/subscribe [:selected-radio])]\r\n    (fn []\r\n      [:div(for [option [\"Option 1\" \"Option 2\" \"Option 3\"]]\r\n             [:label\r\n              {:key option}\r\n              [:input\r\n               {:type \"radio\"\r\n                :name \"options\"\r\n                :value option\r\n                :checked (= @selected-radio option)\r\n                :on-change #(re-frame/dispatch [:set-selected-radio option])}]\r\n              option])])))\r\n\r\n; ===========================\r\n; ---------- PAGES ----------\r\n; ===========================\r\n\r\n; --- Navigation bar\r\n\r\n(defn nav-link [panel label]\r\n  [:a {:href \"#\"\r\n       :on-click (fn [e]\r\n                   (.preventDefault e)\r\n                   (re-frame/dispatch [::events/navigate panel]))}\r\n   label])\r\n\r\n(defn navbar []\r\n  [:div {:class \"container\"}\r\n   [:div {:class \"row\"}\r\n    [:div {:class \"topnav\"}\r\n     [nav-link :home  \"Home\"]\r\n     [nav-link :about \"About\"]\r\n     [nav-link :data  \"Data\"]\r\n     [nav-link :test  \"Test\"]]\r\n    ]])\r\n\r\n; --- Home page\r\n\r\n(defn home-panel []\r\n  (let [name (re-frame/subscribe [::subs/name])]\r\n    [:div\r\n     [:h1\r\n      (str \"Web app enabled by \" @name \".\")]\r\n     [:div\r\n      \"Check out the navbar to look at different implementations.\"]\r\n     ]))\r\n\r\n(defmethod routes/panels :home-panel [] [home-panel])\r\n\r\n; --- About page\r\n\r\n(defn about-panel []\r\n  [:div\r\n   [:h1 \"The contents\"]\r\n   \r\n   [:div\r\n    \"This web page is made using the day8 re-frame template using bibi/pushy for routing.\"]])\r\n\r\n(defmethod routes/panels :about-panel [] [about-panel])\r\n\r\n; --- Data page\r\n\r\n(defn data-panel []\r\n  [:div\r\n   [:h1 \"Dummy data\"]])\r\n\r\n(defmethod routes/panels :data-panel [] [data-panel])\r\n\r\n; --- Test page\r\n\r\n(defn test-panel []\r\n  (let [name (re-frame/subscribe [::subs/name])]\r\n    [:div\r\n     [:h1 @name]\r\n     [counting-component]\r\n     [timer-component]\r\n     [shared-state]]))\r\n\r\n(defmethod routes/panels :test-panel [] [test-panel])\r\n\r\n; ================================\r\n; ---------- Main panel ----------\r\n; ================================\r\n\r\n(defn main-panel []\r\n  (let [active-panel (re-frame/subscribe [::subs/active-panel])]\r\n    (routes/panels @active-panel)))\r\n\r\n(defn main-view []\r\n  [:div\r\n   [navbar]\r\n   [main-panel]])"]}